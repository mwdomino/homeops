This repo contains everything needed to bootstrap a vSphere cluster for homelab usage.

* Install ESXi on each host
* Download and install VCSA (vCenter Server Appliance)
** This must be run from a Windows VM or PC
* Add ESXi hosts to vSphere cluster through UI
The initial build will all take place on `srv04`, the beefcake of the servers
* Configure edgerouter BGP
** Edgerouter AS: 64513
** MetalLB AS: 64514
** EdgeRouter config:
configure
set protocols bgp 64513 parameters router-id 172.16.200.1
set protocols bgp 64513 neighbor 172.16.200.10 remote-as 64514
set protocols bgp 64513 neighbor 172.16.200.10 ebgp-multihop 255
set protocols bgp 64513 neighbor 172.16.200.10 soft-reconfiguration inbound
set protocols bgp 64513 neighbor 172.16.200.11 remote-as 64514
set protocols bgp 64513 neighbor 172.16.200.11 ebgp-multihop 255
set protocols bgp 64513 neighbor 172.16.200.11 soft-reconfiguration inbound
set protocols bgp 64513 neighbor 172.16.200.12 remote-as 64514
set protocols bgp 64513 neighbor 172.16.200.12 ebgp-multihop 255
set protocols bgp 64513 neighbor 172.16.200.12 soft-reconfiguration inbound

** MetalLB Config
From: https://metallb.universe.tf/installation/

kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml
# First install only
kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
kubectl apply -f k3s/metallb-config.yml

* DNS Records
| Host Name          |            IP |
|--------------------+---------------|
| srv01.dominey.home |   192.168.1.3 |
| srv03.dominey.home |   192.168.1.6 |
| srv04.dominey.home |  192.168.1.10 |
| vcsa.dominey.home  |  192.168.1.11 |
| k8s1.dominey.lab   | 172.16.200.10 |
| k8s2.dominey.lab   | 172.16.200.11 |
| k8s3.dominey.lab   | 172.16.200.12 |

* Subnets
| CIDR            | VLAN | Usage                                 |
|-----------------+------+---------------------------------------|
| 192.168.1.0/24  |    0 | Home LAN/WiFi                         |
| 172.16.200.0/24 |  300 | Lab Network (VMs accessible from LAN) |
| 172.17.10.0/24  |  310 | K8s MetalLB pods                      |

* Packer templates live in the `packer/` subdirectory
** [X] Centos7-base
*** template of fresh install with SSH server and dependencies
this is the base image for all VMs

* Terraform
** [ ] k3s-cluster
*** Builds 3 CentOS7 K3s nodes:
**** k3s1 - master
**** k3s2 - worker
**** k3s3 - worker

* Ansible
** [ ] k3s-cluster
*** Playbook installs k3s with required settings on each node:
**** Enable TLS
**** Disable ServiceLB
will be using MetalLB with BGP
**** Disable LocalStorage
will be using Rancher Longhorn for distributed storage
**** Inspired by https://blog.quickbird.uk/domesticating-kubernetes-d49c178ebc41

** Sets DNS Records on Edgerouter
*** Should I switch to a better DNS server?
** Post install setup
** All playbooks linted by Jenkins and run to ensure idempotence
** k3s-cluster


# Delete existing manifest, replace with our customized one
# ssh root@172.16.200.10 'rm /var/lib/rancher/k3s/server/manifests/traefik.yaml'
# scp k3s/traefik.yaml root@172.16.200.10:/var/lib/rancher/k3s/server/manifests/traefik-customized.yaml

# Deploy Longhorn
kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/master/deploy/longhorn.yaml
# Patch svc to use metallb loadbalancer
kc -n longhorn-system patch svc longhorn-frontend --patch "$(cat k3s/longhorn-service-patch.yaml)"
# Patch number of replicas
kc replace -f k3s/longhorn-sc-patch.yaml --force

* Bootstrap commands AIO
scp root@172.16.200.10:~/.kube/config ~/.kube/config
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml
kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
kubectl apply -f k3s/metallb-config.yml
kubectl apply -f https://raw.githubusercontent.com/longhorn/longhorn/master/deploy/longhorn.yaml
kc -n longhorn-system patch svc longhorn-frontend --patch "$(cat k3s/longhorn-service-patch.yaml)"
kc replace -f k3s/longhorn-sc-patch.yaml --force
